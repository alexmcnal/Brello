{{- if .Values.postgresql.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.postgresql.name }}-pvc
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "brello.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: database
spec:
  accessModes:
    - {{ .Values.postgresql.persistence.accessMode }}
  resources:
    requests:
      storage: {{ .Values.postgresql.persistence.size }}
  {{- if .Values.postgresql.persistence.storageClass }}
  storageClassName: {{ .Values.postgresql.persistence.storageClass }}
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgresql.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.postgresql.name }}
    app.kubernetes.io/name: {{ include "brello.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.postgresql.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.postgresql.name }}
        app.kubernetes.io/name: {{ include "brello.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.postgresql.service.port }}
        env:
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.database.name }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.database.user }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.name }}-secret
              key: password
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.postgresql.database.user }}
          initialDelaySeconds: {{ .Values.postgresql.healthCheck.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.postgresql.healthCheck.liveness.periodSeconds }}
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.postgresql.database.user }}
          initialDelaySeconds: {{ .Values.postgresql.healthCheck.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.postgresql.healthCheck.readiness.periodSeconds }}
      volumes:
      - name: postgres-storage
        {{- if .Values.postgresql.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.postgresql.name }}-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }} 